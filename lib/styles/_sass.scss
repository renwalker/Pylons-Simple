/* ==========================================================================
	!  Set your styles here
	========================================================================== */

	$link-color: #0084dd;
	$body-font-color: #222;
	$body-font: sans-serif;
	$primary-color: #0084dd;
	$secondary-color: #999;
	$alert-color: #FF0000;
	$form-radius: 0px;



/* ==========================================================================
	!  Foundation Functions
	========================================================================== */

	$rem-base: 16px !default;

	// FUNCTIONS
	@function lower-bound($range){
		@if length($range) <= 0 {
			@return 0;
			}
		@return nth($range,1);
	}

	@function upper-bound($range) {
		@if length($range) < 2 {
			@return 999999999999;
		}
		@return nth($range, 2);
	}

	@function strip-unit($num) {
		@return $num / ($num * 0 + 1);
	}

	// Convert to REM
	@function convert-to-rem($value, $base-value: $rem-base)  {
		$value: strip-unit($value) / strip-unit($base-value) * 1rem;
		@if ($value == 0rem) { $value: 0; }
		@return $value;
	}

	@function data($attr) {
	  @if $namespace {
	    @return '[data-' + $namespace + '-' + $attr + ']';
	  }
	  @return '[data-' + $attr + ']';
	}

	@function rem-calc($values, $base-value: $rem-base) {
		$max: length($values);
		@if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }
		$remValues: ();
		@for $i from 1 through $max {
			$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value))
		}
		@return $remValues;
	}

	// Deprecated
	@function emCalc($values){
		@return rem-calc($values);
	}
	@function em-calc($values){
		@return rem-calc($values);
	}


/* ==========================================================================
	!  Foundation Variables
	========================================================================== */
	$namespace: false !default;
	$experimental: true !default;


	// responsive breakpoints
	$small-range: (0em, 40em) !default;
	$medium-range: (40.063em, 64em) !default;
	$large-range: (64.063em, 90em) !default;
	$xlarge-range: (90.063em, 120em) !default;
	$xxlarge-range: (120.063em) !default;

	$screen: "only screen" !default;

	$landscape: "#{$screen} and (orientation: landscape)" !default;
	$portrait: "#{$screen} and (orientation: portrait)" !default;

	$small-up: $screen !default;
	$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;
	$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
	$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;
	$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
	$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;
	$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
	$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;
	$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
	$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;



	// Legacy
	$small: $medium-up;
	$medium: $medium-up;
	$large: $large-up;

	  meta.foundation-mq-small {
	    font-family: "/" + unquote($small-only) + "/";
	    width: lower-bound($small-range);
	  }

	  meta.foundation-mq-medium {
	    font-family: "/" + unquote($medium-only) + "/";
	    width: lower-bound($medium-range);
	  }

	  meta.foundation-mq-large {
	    font-family: "/" + unquote($large-up) + "/";
	    width: lower-bound($large-range);
	  }

	  meta.foundation-mq-xlarge {
	    font-family: "/" + unquote($xlarge-up) + "/";
	    width: lower-bound($xlarge-range);
	  }

	  meta.foundation-mq-xxlarge {
	    font-family: "/" + unquote($xxlarge-up) + "/";
	    width: lower-bound($xxlarge-range);
	  }


/* ==========================================================================
	!  More Mixins
	========================================================================== */

	// Catch-all for vendors
	@mixin vendor-prefix($name, $argument) {
		#{$name}: $argument;
		-webkit-#{$name}: $argument;
		-ms-#{$name}: $argument;
		-moz-#{$name}: $argument;
		/*   -o-#{$name}: $argument; RIP Opera... */
	}

	// Add transitions to elements
	@mixin single-transition($property:all, $speed:300ms, $ease:ease-in-out) {
		@include transition-property($property);
		@include transition-duration($speed);
		@include transition-timing-function($ease);
	}

	// We use this to do clear floats
	@mixin clearfix() {
		*zoom:1;
		&:before, &:after { content: " "; display: table; }
		&:after { clear: both; }
	}





